package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short INT_LITERAL = 6;
		static public final short TRUE = 7;
		static public final short FALSE = 8;
		static public final short RCURLY = 9;
		static public final short LCURLY = 10;
		static public final short INT = 11;
		static public final short VOID = 12;
		static public final short BOOLEAN = 13;
		static public final short SEMICOLON = 14;
		static public final short IF = 15;
		static public final short WHILE = 16;
		static public final short BREAK = 17;
		static public final short RETURN = 18;
		static public final short RPAREN = 19;
		static public final short RBRACKET = 20;
		static public final short EQL = 21;
		static public final short ELSE = 22;
		static public final short IMPORT = 23;
		static public final short PUBLIC = 24;
		static public final short COMMA = 25;
		static public final short PLUS = 26;
		static public final short TIMES = 27;
		static public final short DIV = 28;
		static public final short MOD = 29;
		static public final short TYPE = 30;
		static public final short MODULE = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LEQ = 34;
		static public final short GEQ = 35;
		static public final short LT = 36;
		static public final short GT = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9ozLbbm55KKFJsJ42SXWJWG4YGHZ4aW2TdtVSD021W5KKJGeBW45t35A89H49Jy#M#LF$v" +
		"OfLLkg751HSKT5HH54HS4Dq1mYQBNqzrlcfwUxin8eKcTTxTpxtlzUjvz3VYMOGNEna8quJ" +
		"mimFcuGBx2QRW1D#8c#925F1IYo9iZZqNdm1y39ywJ8nRdNYyEnbYS14zEq5hpxvwS3AlEU" +
		"8ip5sUX0YteGZMkH1dAaOu#N8CqZ1iXDc64sAGHOdTunixmZ9pf6SdrZ1I4HKgDYDrphkLf" +
		"fQSUFV8rLXcPnIwyjKWnOgcOxn9jL5KcOd5OT7B4hDCCJvlZhJIh$4pP7SQkYiZlYF3CZF1" +
		"Sw3g7qsx7HRWumdkzospHAlL6PIJBVgpaVADm2Kx1wKX44aPZAIx5PLY6ot55r0edsqx6R7" +
		"HZ3WAOmXNrgnM5VWrTg5Mdf5##mtB6pL#6cMD6p740j#1snCjls42CnQceGwySmBN8niryw" +
		"jkGZpjn3sg8ZSZ11ap5T9IWKZubiu7xqSdnLip0B9o3HLY2gx0QLsCUhkExM8ExS3VMOJqx" +
		"mttO18qToyzE4i#TJE2w0shToTpJCPmzbVDxSzfZu6WnS18zER0u4pmvciK9U78IO#2urSb" +
		"bHvlACvRFqr$8VIxYMIvHP$$$ZVtNaP4y5TmHCxFDXTUWOYtaULT96J5wtEDyAo56W1N#tQ" +
		"fZdyDfwrOmmZlk12h5HMLKAayjUtqzPIDxIZFx$1JUNjcyftAYLZZPTYLlz4d8v8g2N96cL" +
		"cH$zj39rZCrzVRD73DYZbdyPGJPfmBiIm5ZHwlKVgJngq6NGRxJTFR7TBBIoFBJJk5tH0gP" +
		"rTmF7qUD#wx$1mrs8hKCmmumCfvhJc5dq3W2WsivYCXF52L4BT44#APHBY5wg1TGhj1v8T0" +
		"tbaClPHcHIMJJxcCTeHmmEUm5q98err7cAHzvMhUfQrk9GU8OZKxMoA5SI5bCkLpDqy7u0v" +
		"I5D5OhNvtAdqczNlaQRMkhPEmXnNcOU9I#2ihDn25Ykuhj2dycRIEnbzmcLMSExGEKpSfEj" +
		"FDLpc7wMrIybVQmawDY6j6cSlgfjxlnF79dAPb5p51w3T6fwcqX1bpo9YlPesG3eU$PN1hS" +
		"8zzy1tynqKKi8kRP$BELN4ei2FdvgdVRzc6Os6IpTqIk1qTj#ZwRtcVJLxdahG#tjLJbVr3" +
		"9HvGSid4cAjysHwsTplgsd5Brd7nNsa7AD1hxJQabAKw1IrwTmsu$hlioN9vdZyC#uh6URf" +
		"lkyrhtYO8rLxhuNDUYrdb$xBLzerto1w7#v9WSDYH7#LF#a64u$kHNI$lI6FU6HRyWzbZMv" +
		"yHdXlO9yQAy84EKxyk773yWjX6l42$95XcIZmtcJld8a3laTNbDNfMjyh9XFotFStnEDijJ" +
		"ygGyOVWUDyPdvHbvKzwGxVAUl2lloDlo5hsxZDYFnlY3Nbk#bqDoKE#dyWtnhMtLlyW#EMf" +
		"PH#HdxiDVXlutXsv#6Ouo#daDUpZFjt6FX51BdzwR6zd36tdVDF5MQ2PVlmbvbjcxDGkbh1" +
		"52iN7Nc6XWZHRA5lhBgPSphuowYGGYGCGJFdwpWD1KpCTRJ3EGntbrwBTu4MFJYLRgRgXIA" +
		"22dWBBQXdpwyYbpMJkNib2Xme2VTwP6n15#1Sq1Fph#0Mv18oC=");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN8 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 8];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN6,	// [0] Module = MODULE ID LCURLY Imports Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN3,	// [1] Import = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [2] Imports = Import Imports; returns 'Imports' although none is marked
			Action.NONE,  	// [3] Imports = 
			Action.RETURN,	// [4] Declaration = FunctionDeclaration
			Action.RETURN,	// [5] Declaration = FieldDeclaration
			Action.RETURN,	// [6] Declaration = TypeDeclaration
			RETURN2,	// [7] Declarations = Declaration Declarations; returns 'Declarations' although none is marked
			Action.NONE,  	// [8] Declarations = 
			RETURN9,	// [9] FunctionDeclaration = Accessibility TypeName ID LPAREN Parameters RPAREN LCURLY Statements RCURLY; returns 'RCURLY' although none is marked
			RETURN8,	// [10] FunctionDeclaration = Accessibility TypeName ID LPAREN RPAREN LCURLY Statements RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [11] FieldDeclaration = Accessibility TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [12] TypeDeclaration = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [13] Accessibility = PUBLIC
			Action.NONE,  	// [14] Accessibility = 
			Action.RETURN,	// [15] PrimitiveType = INT
			Action.RETURN,	// [16] PrimitiveType = VOID
			Action.RETURN,	// [17] PrimitiveType = BOOLEAN
			RETURN3,	// [18] ArrayType = PrimitiveType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [19] ArrayType = ArrayType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [20] ArrayType = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [21] TypeName = PrimitiveType
			Action.RETURN,	// [22] TypeName = ArrayType
			Action.RETURN,	// [23] TypeName = ID
			RETURN2,	// [24] Parameter = TypeName ID; returns 'ID' although none is marked
			new Action() {	// [25] Parameters = Parameter
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [26] Parameters = Parameters COMMA Parameter
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			RETURN2,	// [27] Statements = Statement Statements; returns 'Statements' although none is marked
			Action.NONE,  	// [28] Statements = 
			RETURN3,	// [29] Statement = TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [30] Statement = LCURLY Statements RCURLY; returns 'RCURLY' although none is marked
			RETURN7,	// [31] Statement = IF LPAREN Expression RPAREN Statement ELSE Statement; returns 'Statement' although none is marked
			RETURN9,	// [32] Statement = IF LPAREN Expression RPAREN Statement ELSE Statement ELSE Statement; returns 'Statement' although none is marked
			RETURN5,	// [33] Statement = WHILE LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [34] Statement = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.NONE,  	// [35] opt$Expression = 
			Action.RETURN,	// [36] opt$Expression = Expression
			RETURN3,	// [37] Statement = RETURN opt$Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [38] Statement = Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [39] LHSExpression = ID
			Action.RETURN,	// [40] LHSExpression = ArrayAccess
			RETURN4,	// [41] ArrayAccess = ID LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			RETURN4,	// [42] ArrayAccess = ArrayAccess LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [43] RHSExpression = ArithmeticExpression
			RETURN3,	// [44] RHSExpression = ArithmeticExpression ComparisonOp ArithmeticExpression; returns 'ArithmeticExpression' although none is marked
			RETURN3,	// [45] Assignment = LHSExpression EQL Expression; returns 'Expression' although none is marked
			Action.RETURN,	// [46] ComparisonOp = EQEQ
			Action.RETURN,	// [47] ComparisonOp = NEQ
			Action.RETURN,	// [48] ComparisonOp = LEQ
			Action.RETURN,	// [49] ComparisonOp = GEQ
			Action.RETURN,	// [50] ComparisonOp = LT
			Action.RETURN,	// [51] ComparisonOp = GT
			Action.RETURN,	// [52] AddictiveOp = PLUS
			Action.RETURN,	// [53] AddictiveOp = MINUS
			new Action() {	// [54] ArithmeticExpression = ArithmeticExpression AddictiveOp Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [55] ArithmeticExpression = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [56] MultiplicativeOp = TIMES
			Action.RETURN,	// [57] MultiplicativeOp = DIV
			Action.RETURN,	// [58] MultiplicativeOp = MOD
			new Action() {	// [59] Term = Term MultiplicativeOp Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [60] Term = Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN2,	// [61] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [62] Factor = PrimaryExpression
			Action.RETURN,	// [63] Expression = Assignment
			Action.RETURN,	// [64] Expression = RHSExpression
			Action.RETURN,	// [65] Expressions = Expression
			RETURN3,	// [66] Expressions = Expression COMMA Expressions; returns 'Expressions' although none is marked
			Action.RETURN,	// [67] PrimaryExpression = LHSExpression
			RETURN4,	// [68] PrimaryExpression = ID LPAREN Expressions RPAREN; returns 'RPAREN' although none is marked
			RETURN3,	// [69] PrimaryExpression = ID LPAREN RPAREN; returns 'RPAREN' although none is marked
			RETURN3,	// [70] PrimaryExpression = LBRACKET Expressions RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [71] PrimaryExpression = STRING_LITERAL
			Action.RETURN,	// [72] PrimaryExpression = INT_LITERAL
			Action.RETURN,	// [73] PrimaryExpression = TRUE
			Action.RETURN,	// [74] PrimaryExpression = FALSE
			RETURN3	// [75] PrimaryExpression = LPAREN Expression RPAREN; returns 'RPAREN' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
