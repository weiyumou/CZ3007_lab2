package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short MODULE = 1;
		static public final short INT = 2;
		static public final short VOID = 3;
		static public final short IF = 4;
		static public final short ELSE = 5;
		static public final short WHILE = 6;
		static public final short RETURN = 7;
		static public final short BREAK = 8;
		static public final short BOOLEAN = 9;
		static public final short PUBLIC = 10;
		static public final short TRUE = 11;
		static public final short FALSE = 12;
		static public final short INT_LITERAL = 13;
		static public final short STRING_LITERAL = 14;
		static public final short ID = 15;
		static public final short TYPE = 16;
		static public final short IMPORT = 17;
		static public final short PLUS = 18;
		static public final short MINUS = 19;
		static public final short TIMES = 20;
		static public final short DIV = 21;
		static public final short MOD = 22;
		static public final short EQEQ = 23;
		static public final short NEQ = 24;
		static public final short LEQ = 25;
		static public final short GEQ = 26;
		static public final short LT = 27;
		static public final short GT = 28;
		static public final short LBRACKET = 29;
		static public final short RPAREN = 30;
		static public final short COMMA = 31;
		static public final short RCURLY = 32;
		static public final short LCURLY = 33;
		static public final short SEMICOLON = 34;
		static public final short RBRACKET = 35;
		static public final short LPAREN = 36;
		static public final short EQL = 37;
	}
	static public class AltGoals {
		static public final short Dummy = 38;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pDaMjIma0GX9iG7aaWyWWGGH04aN0DB#OvhV8Qlc7zPWoUmQtwfZlxOwhJA#and1I54Bx" +
		"KKXpEQgkhdZeQQAH44wKgbMcXfVfQAzTMLzhheA7iZCEt2dTJcAd9l8QvtztuNC6jkmtSkT" +
		"l1lRi7drNjAZNOBKMAoT4aIKwk8QaACitOdR0rPL$6fftw90yaaWRkHZ3MdZc1gT#LFkUmS" +
		"BU4bRirRDnjVLgYuvF#JWJsHsreGGTYw482AJGWWnxyff5ov8nUSfrGwujqz4LhK7ZdifpX" +
		"yz8V$WCjhKNyUzsavNwpFj5NT6cDMaw#dsjzCVsFr2VsjwterDxvGDV77ypMWum=");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN37 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 37];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] $goal = Module
			RETURN2,	// [1] $goal = $Dummy Dummy; returns 'Dummy' although none is marked
			Action.NONE,  	// [2] Module = 
			RETURN37	// [3] Dummy = MODULE INT VOID IF ELSE WHILE RETURN BREAK BOOLEAN PUBLIC TRUE FALSE INT_LITERAL STRING_LITERAL ID TYPE IMPORT PLUS MINUS TIMES DIV MOD EQEQ NEQ LEQ GEQ LT GT LBRACKET RPAREN COMMA RCURLY LCURLY SEMICOLON RBRACKET LPAREN EQL; returns 'EQL' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
